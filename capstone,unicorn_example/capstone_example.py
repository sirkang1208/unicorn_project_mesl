# test1.py
from capstone import *

#code which i want to translate
CODE = b"\x00\x48\x2D\xE9\x04\xB0\x8D\xE2\x10\xD0\x4D\xE2\x80\x30\x9F\xE5\x00\x30\x93\xE5\x08\x30\x0B\xE5\x00\x30\xA0\xE3\x74\x00\x9F\xE5\xA9\xFF\xFF\xEB\x14\x30\x4B\xE2\x03\x10\xA0\xE1\x68\x00\x9F\xE5\xAE\xFF\xFF\xEB\x64\x00\x9F\xE5\xA3\xFF\xFF\xEB\x10\x30\x4B\xE2\x03\x10\xA0\xE1\x50\x00\x9F\xE5\xA8\xFF\xFF\xEB\x14\x20\x1B\xE5\x10\x30\x1B\xE5\x03\x30\x82\xE0\x0C\x30\x0B\xE5\x0C\x10\x1B\xE5\x3C\x00\x9F\xE5\x98\xFF\xFF\xEB\x00\x30\xA0\xE3\x20\x20\x9F\xE5\x00\x10\x92\xE5\x08\x20\x1B\xE5\x01\x10\x32\xE0\x00\x20\xA0\xE3\x00\x00\x00\x0A\x93\xFF\xFF\xEB\x03\x00\xA0\xE1\x04\xD0\x4B\xE2\x00\x88\xBD\xE8\x08\x0F\x02\x00\x54\x06\x01\x00\x64\x06\x01\x00\x68\x06\x01\x00\x78\x06\x01\x00"

#setting capstone class variable
#similar as unicorn
md = Cs(CS_ARCH_ARM, CS_MODE_ARM+CS_MODE_LITTLE_ENDIAN)

#from 0x1000, length code -> disassemble code
for i in md.disasm(CODE, 0x010510):
    #when we disassemble, we get array which have address, mnemonic, op_str
    print("0x%x:\t%s\t%s" %(i.address, i.mnemonic, i.op_str))

# same as above
# for (address, size, mnemonic, op_str) in md.disasm_lite(CODE, 0x1000):
#   	print("0x%x:\t%s\t%s" %(address, mnemonic, op_str))SS